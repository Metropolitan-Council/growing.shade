count(canopy_percent) %>%
mutate(total_com = sum(n),
n = n / total_com) %>%
mutate(canopy_percent = factor(canopy_percent, levels=c("<10%", "10-20%", "20-30%", "30-40%", "40-50%", ">50%"))) %>%
ggplot(aes(y = fct_rev(canopy_percent), x = n,
label = paste0(round(n*100,1), "%"))) +
geom_bar(stat = "identity",
width = .5)+
labs(y = "", x = "Percent of communities") +
theme_minimal() +
scale_x_continuous(labels = scales::percent, limits = c(0,.4)) +
ggrepel::geom_label_repel(nudge_x = 10)
??geom_label_repel
ctu_list %>%
sf::st_drop_geometry() %>%
dplyr::select(GEO_NAME, canopy_percent) %>%
mutate(canopy_percent = case_when(canopy_percent < .10 ~ "<10%",
canopy_percent <=.2 ~ "10-20%",
canopy_percent <=.3~ "20-30%",
canopy_percent <=.4 ~ "30-40%",
canopy_percent <=.5 ~ "40-50%",
TRUE ~ ">50%")) %>%
count(canopy_percent) %>%
mutate(total_com = sum(n),
n = n / total_com) %>%
mutate(canopy_percent = factor(canopy_percent, levels=c("<10%", "10-20%", "20-30%", "30-40%", "40-50%", ">50%"))) %>%
ggplot(aes(y = fct_rev(canopy_percent), x = n,
label = paste0(round(n*100,1), "%"))) +
geom_bar(stat = "identity",
width = .5)+
labs(y = "", x = "Percent of communities") +
theme_minimal() +
scale_x_continuous(labels = scales::percent, limits = c(0,.4)) +
ggrepel::geom_label_repel(nudge_x = 10,segment.color = NA)
ctu_list %>%
sf::st_drop_geometry() %>%
dplyr::select(GEO_NAME, canopy_percent) %>%
mutate(canopy_percent = case_when(canopy_percent < .10 ~ "<10%",
canopy_percent <=.2 ~ "10-20%",
canopy_percent <=.3~ "20-30%",
canopy_percent <=.4 ~ "30-40%",
canopy_percent <=.5 ~ "40-50%",
TRUE ~ ">50%")) %>%
count(canopy_percent) %>%
mutate(total_com = sum(n),
n = n / total_com) %>%
mutate(canopy_percent = factor(canopy_percent, levels=c("<10%", "10-20%", "20-30%", "30-40%", "40-50%", ">50%"))) %>%
ggplot(aes(y = fct_rev(canopy_percent), x = n,
label = paste0(round(n*100,1), "%"))) +
geom_bar(stat = "identity",
width = .5)+
labs(y = "", x = "Percent of communities") +
theme_minimal() +
scale_x_continuous(labels = scales::percent, limits = c(0,.4)) +
ggrepel::geom_label_repel(nudge_x = 10,segment.color = NA)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
library(tidyvere)
library(tidyverse)
df <- read_csv("./analytics-export.csv")
df
df <- read_csv("./analytics-export.csv", skip = 10)
df
df <- read_csv("./analytics-export.csv", skip = 312)
df
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"))
df
df %>% arrange(Users) %>%
select(City, Users)
df %>% arrange(-Users) %>%
select(City, Users)
df %>% arrange(-Users)# %>%
df %>% filter(Region == "Minnesota") %>% arrange(-Users) %>%
select(City, Users)
df %>% filter(Region == "Minnesota") %>% arrange(-Users) %>%
select(City, Users) %>%
head(n=7)
df
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota")
df %>% arrange(-Users) %>%
select(City, Users) %>%
head(n=7)
df
df %>% mutate(EpU = `Event count` / Users) %>%
arrange(-EpU)
df %>% mutate(EpU = `Event count` / Users) %>%
arrange(-EpU) %>%
select(City, EpU, Users, `Event count`)
df
df %>%
arrange(-`Average engagement time`) #%>%
df %>%
mutate(Engagement = `Average engagement time`/60) %>%
arrange(-Engagement) %>%
select(City, Engagement, Users, `Event count`)
knitr::opts_chunk$set(
echo = F, message = F, warning = F, results = "hide"
)
library(tidyverse)
df %>% arrange(-Users) %>%
select(City, Users) %>%
head(n=7)
ctu_list
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME"))
ctu_list$GEO_NAME
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul"))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
ggplot() +
geom_sf(aes(fill = Users))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME"))# %>%
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
st_as_sf()
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf()
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = Users))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() #%>%
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(aes(fill = Users))
metc_region
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users)) +
theme_void()
knitr::opts_chunk$set(
echo = F, message = F, warning = F, results = "hide"
)
library(tidyverse)
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City))
df %>% arrange(-Users)
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() #%>%
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users)) +
theme_void()
df
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City)) %>%
group_by(City) %>%
summarise(Users = sum(Users))
df %>% arrange(-Users) %>%
select(City, Users) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf() %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users)) +
theme_void()
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City)) %>%
group_by(City) %>%
summarise(Users = sum(Users),
`Event count` = sum(`Event count`))
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City)) %>%
group_by(City) %>%
summarise(Users = sum(Users),
`Event count` = sum(`Event count`))  %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf()
df %>% arrange(-Users) %>%
select(City, Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users)) +
theme_void()
df %>%
# arrange(-Users) %>%
# select(City, Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users)) +
theme_void()
df %>%
mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = EpU)) +
theme_void()
df
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City)) %>%
group_by(City) %>%
summarise(Users = sum(Users),
`Event count` = sum(`Event count`),
`Engagement time` = sum(`Average engagement time` * Users))  %>%
mutate(`Average time engaged (min)` = `Engagement time` / Users / 60) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf()
df %>%
# mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = `Average time engaged (min)`)) +
theme_void()
df
df %>%
filter(is.na(ntracts))
df %>%
filter(is.na(ntracts)) %>%
arrange(-`Event count`)
df %>%
# mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = `Event count`)) +
theme_void()
df %>%
# mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = `Event count` / Users)) +
theme_void()
df %>%
mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = EpU)) +
theme_void()
df %>%
mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = `Event count` / Users)) +
theme_void()
df %>%
mutate(EpU = `Event count` / Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = `Event count`)) +
# geom_sf(aes(fill = `Event count` / Users)) +
theme_void()
df %>%
filter(is.na(ntracts)) %>%
arrange(-Users)
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users)
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
select(City)
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
sf::st_drop_geometry() %>%
select(City)
regulartable(
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
sf::st_drop_geometry() %>%
select(City)
) %>%
theme_zebra() %>%
# theme_booktabs() %>%
autofit(add_w = 0, add_h = 0) %>%
set_table_properties(layout = "autofit") %>%
set_caption("Top three activities in table form.")  %>%
fontsize(size = 8, part = "all")
library(flextable)
regulartable(
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
sf::st_drop_geometry() %>%
select(City)
) %>%
theme_zebra() %>%
# theme_booktabs() %>%
autofit(add_w = 0, add_h = 0) %>%
set_table_properties(layout = "autofit") %>%
set_caption("Top three activities in table form.")  %>%
fontsize(size = 8, part = "all")
regulartable(
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
sf::st_drop_geometry() %>%
select(City, Users)
) %>%
theme_zebra() %>%
# theme_booktabs() %>%
autofit(add_w = 0, add_h = 0) %>%
set_table_properties(layout = "autofit") %>%
set_caption("Top three activities in table form.")  %>%
fontsize(size = 8, part = "all")
regulartable(
df %>%
filter(is.na(ntracts),
Users > 1) %>%
arrange(-Users) %>%
sf::st_drop_geometry() %>%
select(City, Users)
) %>%
theme_zebra() %>%
# theme_booktabs() %>%
autofit(add_w = 0, add_h = 0) %>%
set_table_properties(layout = "autofit") %>%
set_caption("Other Minnesota cities where more than one person has accessed Growing Shade since January 2022.")  %>%
fontsize(size = 10, part = "all")
load("~/Documents/GitHub/planting.shade/data/ctu_list.rda")
load("../data/ctu-list.rda")
load("./data/ctu-list.rda")
load("../data/ctu_list.rda")
knitr::opts_chunk$set(
echo = F, message = F, warning = F, results = "hide",
fig.pos = "H"
,fig.height = 4
, dpi = 300
)
library(tidyverse)
library(flextable)
load("../data/ctu_list.rda")
load("../data/metc_region.rda")
df <- read_csv("./analytics-export.csv", skip = 312) %>%
filter(!str_detect(City, "Cheyenne|not set"),
Region == "Minnesota") %>%
mutate(City = case_when(City == "Saint Paul" | City == "West Saint Paul" | City =="South Saint Paul" ~ "St. Paul",
TRUE ~ City)) %>%
group_by(City) %>%
summarise(Users = sum(Users),
`Event count` = sum(`Event count`),
`Engagement time` = sum(`Average engagement time` * Users))  %>%
mutate(`Average time engaged (min)` = `Engagement time` / Users / 60) %>%
left_join(ctu_list, by = c("City" = "GEO_NAME")) %>%
sf::st_as_sf()
df %>%
# arrange(-Users) %>%
# select(City, Users) %>%
ggplot() +
geom_sf(data = metc_region) +
geom_sf(aes(fill = Users), lwd = .5) +
theme_void()
df %>%
# arrange(-Users) %>%
# select(City, Users) %>%
ggplot() +
geom_sf(data = metc_region, fill = "transparent") +
geom_sf(aes(fill = Users), lwd = .5) +
theme_void()
view(ctu_list)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
devtools::install_github("eclarke/ggbeeswarm")
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
