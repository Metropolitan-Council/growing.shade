interpret_high_value == "low_opportunity" ~ 10 - (raw_value - MIN) / (MAX - MIN) * 10,
TRUE ~ NA_real_)) %>%
#Weights Standard Score
mutate(weights_scaled = case_when(interpret_high_value == "high_opportunity" ~ pnorm(z_score) * 10,
interpret_high_value == "low_opportunity" ~ (10 - pnorm(z_score) * 10),
TRUE ~ NA_real_)) %>%
#clean
dplyr::select(-MEAN, -SD, -MIN, -MAX)  %>%
# full_join(wide_ctu_crosswalk %>% rename(tr20 = GEOID)) %>%
filter(!is.na(name))
filter(bg_growingshade_main, bg_string %in% c("270539800001"))
# ########
# # create metadata
# #########
md1 <- bg_growingshade_main %>%
group_by(variable) %>%
summarise(MEANRAW = mean(raw_value, na.rm = T),
MEANSCALED = mean(weights_scaled, na.rm = T))
temp <- tempfile()
download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_metc/society_census_acs/xlsx_society_census_acs.zip",
destfile = temp
)
acs_tr2 <- readxl::read_xlsx(unzip(temp, "CensusACSTract.xlsx")) %>%
janitor::clean_names()
acs_metadata <-
acs_tr2 %>% #use tracts becuase it has info about disability
filter(str_detect(geoid, "27003|27019|27037|27053|27123|27139|27163"),
year == 2020) %>% #just do metc region for now
dplyr::select(geoid, poptotal:pphother) %>%
pivot_longer(names_to = "variable", values_to = "values", -geoid) %>%
group_by(variable) %>%
summarise(SUM = sum(values, na.rm = T)) %>%
pivot_wider(names_from = variable, values_from = SUM) %>%
transmute(rgn = "twin cities",
ppov185 = (povertyn + poverty150 + pov150_185) / povdenom,
pbipoc = (poptotal - whitenh) / poptotal,
pamindnh = (amindnh) / poptotal,
phisppop = hisppop / poptotal,
pblacknh = blacknh / poptotal,
pasiannh = (asiannh + pacificnh) / poptotal,
pothmultnh = (othernh + multracenh) / poptotal,
pownhome = ownerocc / hutotal,
p_65up = age65up / poptotal,
p_0017 = ageunder18 / poptotal,
sens_age = (age65up + ageunder18) / poptotal,
pd_any = anydis / cdenom) %>%
pivot_longer(names_to = "variable", values_to = "MEANRAW2", -rgn)
md_gee <-
tribble(~rgn, ~variable, ~MEANRAW2,
"twin cities", "canopy_percent", ctu_list_raw$avgcanopy[1],
"twin cities", "canopy_percent2", ctu_list_raw$avgcanopy[1]
)
metadata <- bg_growingshade_main %>%
dplyr::group_by(type, name, variable, interpret_high_value, cc, ej, ph, cons) %>%
dplyr::count() %>%
dplyr::ungroup() %>%
full_join(md1) %>%
mutate(niceinterp =
case_when(interpret_high_value == "high_opportunity" ~ "Higher",
TRUE ~ "Lower"),
nicer_interp = case_when(niceinterp == "Lower" ~ "Lower values = higher priority",
variable == "inverse_ndvi_uncultivated" ~ "Higher values = higher priority",
variable == "inverse_ndvi_land" ~ "Higher values = higher priority",
variable == "canopy_percent2" ~ "Higher values = higher priority",
TRUE ~ "")) %>%
full_join(acs_metadata %>%
bind_rows(md_gee)) %>%
mutate(MEANRAW = if_else(!is.na(MEANRAW2), MEANRAW2, MEANRAW)) %>%
dplyr::select(-MEANRAW2, -rgn)
usethis::use_data(metadata, overwrite = TRUE)
highest_p <- function(x) {
test <- enquo(x)
bg_growingshade_main %>%
filter(name %in% (metadata %>%
filter(!!test == 1)))
}
highest_p(ph)
highest_p <- function(group_var) {
selectedvars <- metadata %>%
filter(!!enquo(group_var) == 1) %>%
.[,2]
bg_growingshade_main %>%
filter(name %in% selectedvars$name) %>%
group_by(bg_string) %>%
summarise(MEAN = mean(weights_scaled, na.rm = F)) #set to false so that public health or ej doesnt get calculated if it is a nonres area
}
priority_summary_1 <-highest_p(ph) %>% rename(`Public health` = MEAN) %>%
full_join(highest_p(cons) %>% rename(Conservation = MEAN)) %>%
full_join(highest_p(ej) %>% rename(`Environmental justice` = MEAN)) %>%
full_join(highest_p(cc) %>% rename(`Climate change` = MEAN)) %>%
pivot_longer(names_to = "preset", values_to = "score", -bg_string)
priority_summary <- priority_summary_1 %>%
group_by(bg_string) %>%
summarise(score = max(score)) %>%
left_join(priority_summary_1) %>%
rename(highest_priority = preset) %>%
rename(GEOID = bg_string)
highest_p_all <- function(group_var) {
selectedvars <- metadata %>%
filter(!!enquo(group_var) == 1) %>%
.[,2]
bg_growingshade_main_allMN %>%
filter(name %in% selectedvars$name) %>%
group_by(bg_string) %>%
summarise(MEAN = mean(weights_scaled, na.rm = F))
}
priority_summary_1_all <-highest_p_all(ph) %>% rename(`Public health` = MEAN) %>%
full_join(highest_p_all(cons) %>% rename(Conservation = MEAN)) %>%
full_join(highest_p_all(ej) %>% rename(`Environmental justice` = MEAN)) %>%
full_join(highest_p_all(cc) %>% rename(`Climate change` = MEAN)) %>%
pivot_longer(names_to = "preset", values_to = "score", -bg_string)
priority_summary_all <- priority_summary_1_all %>%
pivot_wider(names_from = preset, values_from = score) %>%
left_join(bg_growingshade_main_allMN %>%
rename(scaled = weights_scaled,
raw = raw_value) %>%
# ungroup() %>%
dplyr::select(bg_string, variable, scaled, raw) %>%
pivot_wider(names_from = variable, values_from = c(scaled, raw))) %>%
arrange(bg_string) %>%
rename(block_group_id_2010 = bg_string)
bg_geo %>%
right_join(priority_summary_all, by = c("GEOID" = "block_group_id_2010")) %>%
filter(!is.na(`Environmental justice`)) %>%
ggplot() +
geom_sf(aes(fill = `Environmental justice`), lwd = 0) +
theme_minimal()
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1%>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = bg_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
# usethis::use_data(mn_bgs, overwrite = TRUE)
mncounties <- tigris::counties(state = "MN") %>%
filter(COUNTYFP %in% c("003", "019", "037", "053", "123", "139", "163"))
metc_region <- mncounties %>% group_by(COUNTYFP) %>% summarise(geometry = sf::st_union(geometry)) %>%
sf::st_simplify(dTolerance = 400) %>%
sf::st_transform(4326)
usethis::use_data(metc_region, overwrite = TRUE)
speed_up <- function(x, smooth){
x %>%
sf::st_transform(26915) %>%
sf::st_simplify(dTolerance = smooth, preserveTopology = T) %>%
sf::st_transform(4326)
}
# nhood_list <- nhood_list %>% st_make_valid() %>% st_simplify(dTolerance = 100) %>% st_as_sf()
ctu_list <- ctu_list_raw %>%
sf::st_transform(4326)
usethis::use_data(ctu_list, overwrite = TRUE)
nhood_list <- nhood_list_raw %>%
speed_up(50)
usethis::use_data(nhood_list, overwrite = TRUE)
redline <- redline_raw %>%
speed_up(50)
usethis::use_data(redline, overwrite = TRUE)
# lakes <- river_lake_all %>%
#   filter(SYSTEM %in% c("Lake"),
#          AREA_ACRES > 10) %>% #these rivers are boundaries
#   sf::st_transform(26915) %>%
#   st_union() %>%
#   st_buffer(-10) %>%
#   # smoothr::smooth(method = "ksmooth") %>%
#   sf::st_simplify(dTolerance = 50, preserveTopology = F) #Thereâ€™s also a parameter preserveTopology which, when set to TRUE, makes sure that polygons are not reduced to lines or even removed, or that inner holes in them are removed during the simplification process.
# temp <- tempfile()
# download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/trans_airports/gpkg_trans_airports.zip", destfile = temp)
# airports <- sf::read_sf(unzip(temp, "trans_airports.gpkg"))  %>%
#   st_buffer(dist = .$RUNWAY_WID) %>%
#   st_union() %>%
#   # ggplot() + geom_sf()
#   # sf::st_simplify(dTolerance = 25, preserveTopology = F) %>%
#   sf::st_transform(4326)
mn_bgs <- mn_bgs_raw %>%
# if I want to remove lakes; I don't love them removed tbh
# st_transform(26915) %>%
# st_erase(lakes) %>%
# st_erase(airports) %>%
sf::st_simplify(dTolerance = 25, preserveTopology = T) %>%
sf::st_transform(4326) %>%
filter(!is.na(GEOID)) #%>%
# filter(GEOID != "270539800001") #remove airport
usethis::use_data(mn_bgs, overwrite = TRUE)
# leaflet::leaflet() %>%
#   leaflet::addPolygons(data = mn_bgs) %>%
#   leaflet::addPolygons(data = mn_bgs5, color = "red")
# object.size(mn_bgs) / 1e5
# object.size(mn_bgs5) / 1e5
bg_growingshade_main <- bg_growingshade_main %>%
dplyr::select(bg_string, name, weights_scaled, raw_value) %>%
filter(!is.na(bg_string))
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
# eab <- eab %>% dplyr::select(geometry)
# usethis::use_data(eab, overwrite = TRUE)
# object.size(eab2) / 1e5
# object.size(eab) / 1e5
# # ggplot() +
# #   geom_sf(data = ctu_list) +
# #   geom_sf(data = ctu_list2, col = "blue", fill = NA)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# library(leaflet); library(tidyverse); library(sf)
# test <- mn_bgs %>%
#   filter(GEOID =="270531044003") %>% st_transform(4326)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = test)
library(tidyverse)
filter(bg_growingshade_main, bg_string == "270539800001")
filter(bg_growingshade_main, bg_string == "270539800001") %>% data.frame()
filter(mn_bgs, bg_string == "270539800001")
filter(mn_bgs, GEOID == "270539800001")
filter(mn_bgs_raw, GEOID == "270539800001")
filter(bg_geo, GEOID == "270539800001")
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1 %>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = bg_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) %>%
full_join(priority_summary) #%>%
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
mn_bgs_raw <- bg_geo # %>%
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) # %>%
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) #%>%
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) %>%
full_join(priority_summary) #%>%
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001")
filter(priority_summary, GEOID == "270539800001")
head(priority_summary)
filter(priority_summary, GEOID == "270030501071")
filter(priority_summary, GEOID == "270539800001")
priority_summary <- priority_summary_1 %>%
group_by(bg_string) %>%
summarise(score = max(score, na.rm = T)) %>%
left_join(priority_summary_1) %>%
rename(highest_priority = preset) %>%
rename(GEOID = bg_string)
filter(priority_summary, GEOID == "270539800001")
filter(priority_summary, GEOID == "270030501071")
highest_p_all <- function(group_var) {
selectedvars <- metadata %>%
filter(!!enquo(group_var) == 1) %>%
.[,2]
bg_growingshade_main_allMN %>%
filter(name %in% selectedvars$name) %>%
group_by(bg_string) %>%
summarise(MEAN = mean(weights_scaled, na.rm = F))
}
priority_summary_1_all <-highest_p_all(ph) %>% rename(`Public health` = MEAN) %>%
full_join(highest_p_all(cons) %>% rename(Conservation = MEAN)) %>%
full_join(highest_p_all(ej) %>% rename(`Environmental justice` = MEAN)) %>%
full_join(highest_p_all(cc) %>% rename(`Climate change` = MEAN)) %>%
pivot_longer(names_to = "preset", values_to = "score", -bg_string)
priority_summary_all <- priority_summary_1_all %>%
pivot_wider(names_from = preset, values_from = score) %>%
left_join(bg_growingshade_main_allMN %>%
rename(scaled = weights_scaled,
raw = raw_value) %>%
# ungroup() %>%
dplyr::select(bg_string, variable, scaled, raw) %>%
pivot_wider(names_from = variable, values_from = c(scaled, raw))) %>%
arrange(bg_string) %>%
rename(block_group_id_2010 = bg_string)
bg_geo %>%
right_join(priority_summary_all, by = c("GEOID" = "block_group_id_2010")) %>%
filter(!is.na(`Environmental justice`)) %>%
ggplot() +
geom_sf(aes(fill = `Environmental justice`), lwd = 0) +
theme_minimal()
mn_bgs_raw <- bg_geo %>%
right_join(wide_ctu_crosswalk) %>%
full_join(bg_canopy %>% rename(GEOID = bg20)) %>%
full_join(priority_summary) %>%
full_join(priority_summary_1 %>%
group_by(preset) %>%
# mutate(rank = rank(-score)) %>%
# dplyr::select(-score) %>%
pivot_wider(names_from = preset, values_from = score)#rank)
%>% rename(GEOID = bg_string)) %>%
mutate(avgcanopy = mean(canopy_percent, na.rm = T)) %>%
dplyr::select(-STATEFP, -COUNTYFP, -TRACTCE, -BLKGRPCE, -NAMELSAD, -MTFCC, -FUNCSTAT, -INTPTLAT, -INTPTLON) %>%
sf::st_as_sf() %>%
sf::st_transform(4326) %>%
filter(!is.na(highest_priority)) %>% #don't want greater mn in here
mutate(fancyname = case_when(substr(GEOID, 3, 5) == "053" ~ paste0("Hennepin County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "003" ~ paste0("Anoka County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "019" ~ paste0("Carver County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "037" ~ paste0("Dakota County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "123" ~ paste0("Ramsey County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "139" ~ paste0("Scott County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
substr(GEOID, 3, 5) == "163" ~ paste0("Washington County tract ", as.numeric(substr(GEOID, 6, 11))/100, ", block group ", as.numeric(substr(GEOID, 12, 12))),
TRUE ~ NA_character_))
# usethis::use_data(mn_bgs, overwrite = TRUE)
filter(mn_bgs_raw, GEOID == "270539800001") #for na people blocks priority summary is giving two results; should only be one
filter(priority_summary, GEOID == "270539800001")
filter(priority_summary, GEOID == "270030501071")
mncounties <- tigris::counties(state = "MN") %>%
filter(COUNTYFP %in% c("003", "019", "037", "053", "123", "139", "163"))
metc_region <- mncounties %>% group_by(COUNTYFP) %>% summarise(geometry = sf::st_union(geometry)) %>%
sf::st_simplify(dTolerance = 400) %>%
sf::st_transform(4326)
usethis::use_data(metc_region, overwrite = TRUE)
speed_up <- function(x, smooth){
x %>%
sf::st_transform(26915) %>%
sf::st_simplify(dTolerance = smooth, preserveTopology = T) %>%
sf::st_transform(4326)
}
# nhood_list <- nhood_list %>% st_make_valid() %>% st_simplify(dTolerance = 100) %>% st_as_sf()
ctu_list <- ctu_list_raw %>%
sf::st_transform(4326)
usethis::use_data(ctu_list, overwrite = TRUE)
nhood_list <- nhood_list_raw %>%
speed_up(50)
usethis::use_data(nhood_list, overwrite = TRUE)
redline <- redline_raw %>%
speed_up(50)
usethis::use_data(redline, overwrite = TRUE)
# lakes <- river_lake_all %>%
#   filter(SYSTEM %in% c("Lake"),
#          AREA_ACRES > 10) %>% #these rivers are boundaries
#   sf::st_transform(26915) %>%
#   st_union() %>%
#   st_buffer(-10) %>%
#   # smoothr::smooth(method = "ksmooth") %>%
#   sf::st_simplify(dTolerance = 50, preserveTopology = F) #Thereâ€™s also a parameter preserveTopology which, when set to TRUE, makes sure that polygons are not reduced to lines or even removed, or that inner holes in them are removed during the simplification process.
# temp <- tempfile()
# download.file("https://resources.gisdata.mn.gov/pub/gdrs/data/pub/us_mn_state_dot/trans_airports/gpkg_trans_airports.zip", destfile = temp)
# airports <- sf::read_sf(unzip(temp, "trans_airports.gpkg"))  %>%
#   st_buffer(dist = .$RUNWAY_WID) %>%
#   st_union() %>%
#   # ggplot() + geom_sf()
#   # sf::st_simplify(dTolerance = 25, preserveTopology = F) %>%
#   sf::st_transform(4326)
mn_bgs <- mn_bgs_raw %>%
# if I want to remove lakes; I don't love them removed tbh
# st_transform(26915) %>%
# st_erase(lakes) %>%
# st_erase(airports) %>%
sf::st_simplify(dTolerance = 25, preserveTopology = T) %>%
sf::st_transform(4326) %>%
filter(!is.na(GEOID)) #%>%
# filter(GEOID != "270539800001") #remove airport
usethis::use_data(mn_bgs, overwrite = TRUE)
# leaflet::leaflet() %>%
#   leaflet::addPolygons(data = mn_bgs) %>%
#   leaflet::addPolygons(data = mn_bgs5, color = "red")
# object.size(mn_bgs) / 1e5
# object.size(mn_bgs5) / 1e5
bg_growingshade_main <- bg_growingshade_main %>%
dplyr::select(bg_string, name, weights_scaled, raw_value) %>%
filter(!is.na(bg_string))
usethis::use_data(bg_growingshade_main, overwrite = TRUE)
# eab <- eab %>% dplyr::select(geometry)
# usethis::use_data(eab, overwrite = TRUE)
# object.size(eab2) / 1e5
# object.size(eab) / 1e5
# # ggplot() +
# #   geom_sf(data = ctu_list) +
# #   geom_sf(data = ctu_list2, col = "blue", fill = NA)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# library(leaflet); library(tidyverse); library(sf)
# test <- mn_bgs %>%
#   filter(GEOID =="270531044003") %>% st_transform(4326)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = test)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# library(leaflet); library(tidyverse); library(sf)
# test <- mn_bgs %>%
#   filter(GEOID =="270531044003") %>% st_transform(4326)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = test)
# Set options here
options(
shiny.launch.browser = TRUE,
scipen = 9999,
warn = -1,
verbose = FALSE,
golem.app.prod = FALSE
) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
planting.shade::render_guides()
# Run the application
run_app()
# profvis::profvis({
#   print(
#     planting.shade::run_app()
#   )
# })
# library(leaflet); library(tidyverse); library(sf)
# test <- mn_bgs %>%
#   filter(GEOID =="270531044003") %>% st_transform(4326)
# leaflet() %>%
#   addTiles() %>%
#   addPolygons(data = test)
